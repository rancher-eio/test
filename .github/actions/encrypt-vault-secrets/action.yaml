---
name: Read Vault Secrets
description: "... it reads secrets from Vault and Encypts them?"
inputs:
  address:
    description: "the address of a deployed vault server"
    required: false
    default: https://vault.rancher.kitchen
  secrets:
    description: "the secrets to fetch from the vault server"
    required: false
    default: secret/data/github-actions/test status
outputs:
  secrets:
    description: "the secrets fetched from the vault server"
    value: ${{ steps.output.outputs.secrets }}
runs:
  using: composite
  steps:
    - name: Read Secrets from Vault
      uses: hashicorp/vault-action@v3
      id: vault
      with:
        method: jwt
        url: ${{ inputs.address }}
        path: ${{ github.repository_owner }}
        role: ${{ github.event.repository.name }}
        secrets: ${{ inputs.secrets }}
        exportEnv: false
        exportToken: false
        outputToken: false
    - name: Configure Outputs
      uses: actions/github-script@v7
      id: output
      with:
        script: |
          /*const crypto = require('crypto');
          core.exportVariable("ACTIONS_ID_TOKEN_REQUEST_TOKEN", "CONSUMED");
          const secretsObj = ${{ toJSON(steps.vault.outputs) }};
          
          try {
            const encKey = process.env.MANUALLY_CREATED_ENCRYPTION_KEY;
            if (!encKey) {
              throw new Error('MANUALLY_CREATED_ENCRYPTION_KEY secret is required to encrypt secrets');
            }
            const secretsJson = JSON.stringify(secretsObj);
            const iv = crypto.randomBytes(16);
            const key = Buffer.from(encKey, 'hex');
            const cipher = crypto.createCipheriv('aes-256-cbc', key, iv);
            let encrypted = cipher.update(secretsJson, 'utf8', 'hex');
            encrypted += cipher.final('hex');
            const encryptedOutput = `${iv.toString('hex')}:${encrypted}`;
            
            console.log(`Encrypted output length: ${encryptedOutput.length}`);
            console.log(`First 20 chars: ${encryptedOutput.substring(0, 20)}...`);

            core.setOutput('secrets', encryptedOutput);
            console.log('Secrets encrypted successfully');
          } catch (error) {
            core.setFailed(`Encryption failed: ${error.message}`);
          }

          for (const [key, value] of Object.entries(secretsObj)) {
            core.setOutput(key, value);
          }*/
          
          core.setOutput("secrets", ${{ toJSON(steps.vault.outputs) }});
          for (const [key, value] of Object.entries(${{ toJSON(steps.vault.outputs) }})) {
            core.setOutput(key, value);
          }
    
    - name: Verify outputs were set
      shell: bash
      run: |
        echo "Verifying outputs were set correctly..."
        if [ -n "${{ steps.output.outputs.secrets }}" ]; then
          echo "✅ 'secrets' output set successfully"
        else
          echo "❌ ERROR: 'secrets' output was not set!"
          exit 1
        fi
