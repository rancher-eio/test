---
name: Read Vault Secrets
description: "... it reads secrets from Vault and Encypts them?"
inputs:
  address:
    description: "the address of a deployed vault server"
    required: false
    default: https://vault.rancher.kitchen
  secrets:
    description: "the secrets to fetch from the vault server"
    required: false
    default: secret/data/github-actions/test status
outputs:
  declared:
    description: "a declared output"
    value: ${{ steps.output.outputs.declared }}
runs:
  using: composite
  steps:
    - name: Read Secrets from Vault
      uses: hashicorp/vault-action@v3
      id: vault
      with:
        method: jwt
        url: ${{ inputs.address }}
        path: ${{ github.repository_owner }}
        role: ${{ github.event.repository.name }}
        secrets: ${{ inputs.secrets }}
        exportEnv: false
        exportToken: false
        outputToken: false
    - name: GitHub Script
      uses: actions/github-script@v7
      with:
        script: |
          const crypto = require('crypto');
          
          core.exportVariable("ACTIONS_ID_TOKEN_REQUEST_TOKEN", "CONSUMED");
          core.setOutput("declared", "success");
          core.setOutput("undeclared", "success");
          
          const secretsObj = ${{ toJSON(steps.vault.outputs) }};
              try {
              const encKey = process.env.MANUALLY_CREATED_ENCRYPTION_KEY;
              if (!encKey) {
                throw new Error('MANUALLY_CREATED_ENCRYPTION_KEY secret is required to encrypt secrets');
              }
              const secretsJson = JSON.stringify(secretsObj);
              const iv = crypto.randomBytes(16);
              const key = Buffer.from(encKey, 'hex');
              const cipher = crypto.createCipheriv('aes-256-cbc', key, iv);
              let encrypted = cipher.update(secretsJson, 'utf8', 'hex');
              encrypted += cipher.final('hex');
              const encryptedOutput = `${iv.toString('hex')}:${encrypted}`;
              core.setOutput('secrets', encryptedOutput);
              console.log('Secrets encrypted for secure passing between jobs');
            } catch (error) {
              core.setFailed(`Encryption failed: ${error.message}`);
            }
            
          for (const [key, value] of Object.entries(secretsObj)) {
            core.setOutput(key, value);
          }
