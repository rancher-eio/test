name: Fetch and Encrypt Vault Secrets

on:
  workflow_call:
    inputs:
      address:
        description: "the address of a deployed vault server"
        required: false
        default: https://vault.rancher.kitchen
        type: string
      vault_secrets:
        description: "the secrets to fetch from vault in format: path|key"
        required: false
        default: secret/data/github-actions/test status
        type: string
    outputs:
      secrets:
        description: "the encrypted secrets fetched from the vault server"
        value: ${{ jobs.fetch-encrypt.outputs.secrets }}
    secrets:
      CI_ENCRYPTION_KEY:
        required: true

jobs:
  fetch-encrypt:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write 
    outputs:
      secrets: ${{ steps.encrypt.outputs.secrets }}
    steps:
      - name: Fetch Secrets from Vault
        id: vault
        uses: hashicorp/vault-action@v3
        with:
          method: jwt
          url: ${{ inputs.address }}
          path: ${{ github.repository_owner }}
          role: ${{ github.event.repository.name }}
          secrets: ${{ inputs.vault_secrets }}
          exportEnv: false
          exportToken: false
          outputToken: false

      - name: Encrypt Vault Secrets
        id: encrypt
        uses: actions/github-script@v7
        env:
          CI_ENCRYPTION_KEY: ${{ secrets.CI_ENCRYPTION_KEY }}
        with:
          script: |
            const crypto = require('crypto');
            core.exportVariable("ACTIONS_ID_TOKEN_REQUEST_TOKEN", "CONSUMED");
            const secretsObj = ${{ toJSON(steps.vault.outputs) }};
            try {
              const encKey = process.env.CI_ENCRYPTION_KEY;
              if (!encKey) {
                throw new Error('CI_ENCRYPTION_KEY secret is required to encrypt secrets');
              }
              const secretsJson = JSON.stringify(secretsObj);
              const iv = crypto.randomBytes(16);
              const key = Buffer.from(encKey, 'hex');
              const cipher = crypto.createCipheriv('aes-256-cbc', key, iv);
              let encrypted = cipher.update(secretsJson, 'utf8', 'hex');
              encrypted += cipher.final('hex');
              const encryptedOutput = `${iv.toString('hex')}:${encrypted}`;
              
              console.log(`Encrypted output length: ${encryptedOutput.length}`);
              console.log(`First 20 chars: ${encryptedOutput.substring(0, 20)}...`);
      
              core.setOutput("secrets", encryptedOutput);
              
              console.log('Secrets encrypted successfully');
            } catch (error) {
              core.setFailed(`Encryption failed: ${error.message}`);
            }
            for (const [key, value] of Object.entries(secretsObj)) {
              core.setOutput(key, value);
            }
