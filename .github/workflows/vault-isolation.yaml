name: Vault Secret Isolation Test
on:
  workflow_call:
    inputs:
      container:
        default: ubuntu:22.04
        required: false
        type: string
      runs-on:
        default: ubuntu-22.04
        required: false
        type: string
      from-secret:
        type: string
        default: secret/data/github-actions/test
        required: false
      read-key: 
        type: string
        default: status
        required: false
      export-as:
        type: string
        default: PROOF_OF_CONCEPT
        required: false
      expected-value:
        type: string
        default: success
        required: false
  workflow_dispatch:
    inputs:
      runs-on:
        default: ubuntu-latest
        required: false
        type: string
      from-secret:
        type: string
        default: secret/data/github-actions/test
        required: false
      read-key: 
        type: string
        default: status
        required: false
      export-as:
        type: string
        default: PROOF_OF_CONCEPT
        required: false
      expected-value:
        type: string
        default: success
        required: false
jobs:
  fetch-secrets:
      permissions:
        contents: read
        id-token: write
      runs-on: ${{ inputs.runs-on }}
      container: ${{ inputs.container }}
      outputs: 
        PROOF_OF_CONCEPT: ${{ steps.fetch-secret.outputs.PROOF_OF_CONCEPT }}
      steps:
      - id: fetch-secret
        uses: rancher-eio/read-vault-secrets@isolation
        with:
          secrets: |
            secret/data/github-actions/test status | PROOF_OF_CONCEPT
      - name: Debug Output
        run: |
          echo "Direct output access check:"
          echo "PROOF_OF_CONCEPT output exists: ${{ steps.fetch-secret.outputs.PROOF_OF_CONCEPT != '' }}"
    
          echo "${{ steps.fetch-secret.outputs.PROOF_OF_CONCEPT }}" > /tmp/secret.txt
          echo "Value from file: $(cat /tmp/secret.txt)"
          rm /tmp/secret.txt
          
  use-secrets:
    runs-on: ${{ inputs.runs-on }}
    container: ${{ inputs.container }}
    needs: [fetch-secrets]
    permissions:
      contents: read
    steps:
      - name: Validate Secret
        run: |
          if [ "${{ needs.fetch-secrets.outputs.PROOF_OF_CONCEPT }}" = "${{ inputs.expected-value }}" ]; then
            echo "✅ Secret validation successful"
          else
            echo "❌ Secret validation failed"
            exit 1
          fi
          #test "${{ needs.fetch-secrets.outputs.PROOF_OF_CONCEPT }}" = "${{ inputs.expected-value }}"
          
###################################
  # fetch-secrets:
  #   permissions:
  #     contents: read
  #     id-token: write
  #   runs-on: ${{ inputs.runs-on }}
  #   container: ${{ inputs.container }}
  #   outputs:
  #     secrets_json: ${{ steps.vault.outputs.secrets_json }}
  #   # outputs: 
  #   #   PROOF_OF_CONCEPT: ${{ steps.vault.outputs.PROOF_OF_CONCEPT }}
  #   steps:
  #   - id: vault
  #     uses: rancher-eio/read-vault-secrets@isolation
  #     with:
  #       secrets: |
  #         secret/data/github-actions/test status | PROOF_OF_CONCEPT
          
  #   - name: Debug Output
  #     run: |
  #       #echo "proof_of_concept: ${{ steps.vault.outputs.PROOF_OF_CONCEPT }}"
  #       echo "All Outputs: ${{ toJSON(steps.vault.outputs) }}"

  #   - id: validate_empty_env
  #     run: |
  #       test -z "${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}"
        
  #   - id: validate_empty_output
  #     run: |
  #       test -z "${{ steps.fetch.outputs.vault_secrets }}"
        
  # use-secrets:  
  #   runs-on: ${{ inputs.runs-on }}
  #   container: ${{ inputs.container }}
  #   permissions:
  #     contents: read 
  #   needs: fetch-secrets
  #   steps:
  #     - name: Parse Secrets
  #       run: |
  #         echo "PROOF_OF_CONCEPT=${{ fromJSON(env.SECRETS_JSON).PROOF_OF_CONCEPT }}" >> $GITHUB_ENV
  #         # echo "::add-mask::${{ env.PROOF_OF_CONCEPT }}"
  #     - name: Validate Secrets
  #       run: |
  #         test "${{ env.PROOF_OF_CONCEPT }}" = "success"

#################################
# jobs:
#   fetch-secrets:
#     permissions:
#       contents: read
#       id-token: write
#     runs-on: ${{ inputs.runs-on }}
#     container: ${{ inputs.container }}
#     outputs: 
#       PROOF_OF_CONCEPT: ${{ steps.vault.outputs.PROOF_OF_CONCEPT }}
#     steps:
#     - id: vault
#       uses: rancher-eio/read-vault-secrets@isolation
#       with:
#         secrets: |
#            ${{ inputs.from-secret }} ${{ inputs.read-key }} | PROOF_OF_CONCEPT
          
#     - name: Debug Output
#       run: |
#         echo "proof_of_concept: ${{ steps.vault.outputs.PROOF_OF_CONCEPT }}"
          
#   test:  
#     runs-on: ${{ inputs.runs-on }}
#     container: ${{ inputs.container }}
#     permissions:
#       contents: read 
#     needs: fetch-secrets
#     steps:
#       - id: validate
#         name: Validate Secrets
#         # env:
#         #   PROOF_OF_CONCEPT: ${{needs.fetch-secrets.outputs.proof_of_concept}}
#         run: |
#           test "${{ needs.fetch-secrets.outputs.PROOF_OF_CONCEPT }}" = "success"
#           #test "${{ env.PROOF_OF_CONCEPT }}" = "success"
         
#       - id: validate_empty_env
#         name: Check for OIDC Tokens
#         run: |
#           test -z "${ACTIONS_ID_TOKEN_REQUEST_TOKEN}"
